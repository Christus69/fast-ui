<div class="intro">
    <p>
    FastUi is a YUI3 module that is focused on building UIs fast. It is inspired from frameworks like GWT and JSF2,
    focused on a composition model that is easily described in an easy to understand XML.
    </p>

    <p>
    This fits like a glove on top of the YUI3 architecture of widgets.
    </p>
</div>

<h2>Description</h2>

<p>{{>module-description-html}}</p>

<h2>Usage</h2>
<p>In order to use it, you simple need to use XML namespaces mapped to the actual JS namespaces that you want used. You
can use multiple namespaces, and only the "<i>fastui</i>" namespace is reserved.</p>
<p>The "fastui" namespace contains element building configuration. (see the end of this page for details).</p>
<div id="demo" class="example yui3-skin-sam">
    <script>
        YUI({
            modules:{
                'gallery-fast-ui': {
                    fullpath: '/build/gallery-fast-ui/gallery-fast-ui.js'
                }
            }
        }).use('{{use}}', "button", function(Y){
            {{>simple-demo-js}}
        });
    </script>
</div>

```
{{>simple-demo-js}}
```

<h2>Features</h2>

<h3>I18N out of the box</h3>
<p>FastUi takes its template and runs it against handlebars. If the <strong>msg</strong> parameter is set, it will
    automatically replace the values. Furthermore, if the value is set in an attribute of a Widget, it will also get I18N
    for free.</p>

<h3>Y.Node and Y.Widget Support</h3>
<p>When creating elements, if they are marked using the <strong>ui:field</strong> attribute they will be automatically
    exported into the resulting object, with objects of the corresponding type.</p>

<h3>srcNode Support</h3>
<p>When creating widgets FastUi normally creates a placeholder &lt;span&gt; and simply calls widget.render('#idOfSpan').
    FastUi also supports creating a different element using <strong>ui:srcNode</strong> (for example ui:src="div" will
    create a div element), and then passing the srcNode as an attribute to the constructor of the widget.</p>

<h3>True UI Focus</h3>
<p>Many times when creating UIs you need to build them from a mixture of widgets (and HTML). FastUi makes creating
complex UIs a breeze, even if they are actually composed from multiple widgets (see the Full demo for a dialog, with a
tab panel and several buttons created in one go).</p>

<h2>The FastUi Namespace - &lt;div xmlns:ui="fastui"&gt;</h2>
<table>
    <thead>
        <tr>
            <td>
                Name
            </td>
            <td>
                Applicability
            </td>
            <td>
                Description
            </td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                ui:srcNode
            </td>
            <td>
                Widget attribute
            </td>
            <td>
                A string that specifies the tagName of the element that should be created. This element will be passed
                as srcNode to the constructor of that widget.<br/>
                ```
                <Y:Button xmlns:Y="Y" xmlns:ui="fastui" ui:srcNode="span" label="\{{MY_BUTTON}}"/>
                ```
                in the end will call:
                ```
                new Y.Button({
                    srcNode : '#generated-id-for-that-span',
                    label : 'translated value for MY_BUTTON'
                });
                ```
            </td>
        </tr>
        <tr>
            <td>
                ui:field
            </td>
            <td>
                Widget attribute, Node attribute
            </td>
            <td>
                A string that represents the name of the Widget or Node that should be exported into the object
                returned by Y.fastUi function. So if the htmlCode is:
                ```
                <Y:Button xmlns:Y="Y" xmlns:ui="fastui" ui:field="myButton" label="\{{MY_BUTTON}}"/>
                ```
                then you can:
                ```
                var ui = Y.fastUi(parentElementWhereToRender, htmlCode);

                ui.myButton.on("click", function() {
                    alert('clicked');
                });
                ```
            </td>
        </tr>
        <tr>
            <td>
                ui:config
            </td>
            <td>
                Widget child
            </td>
            <td>
                By default attributes in the element are passed as strings. Sometimes it's important to send different
                types (number, regexp, etc), or even other built UIs.<br/>
                The ui:config element two attributes name (that is the constructor object key name) and type (default "js"),
                and can be also "ui", when it will be sent to parsing to fastUi, and the resulting root Node or Widget
                passed to the constructor argument.
                ```
                <Y:Panel ui:field="dialog" ui:srcNode="div" xmlns:Y="Y" xmlns:ui="fastui" headerContent="awesome title">
                    <ui:config name="width">400</ui:config>
                    <ui:config name="centered">true</ui:config>
                    <ui:config name="size">[400,300]</ui:config>
                    <ui:config name="bodyContent" type="ui">
                        <Y:TabView ui:srcNode="div">
                            <ul>
                                <li><a href="tab1">{HOME}</a></li>
                            </ul>
                        </Y:TabView>
                    </ui:config>
                </Y:Panel>
                ```
            </td>
        </tr>
        <tr>
            <td>
                ui:config-key
            </td>
            <td>
                Widget attribute
            </td>
            <td>
                A string that is the key in the configuration object of fastUi, that will be merged and passed to the
                constructor of that Widget.
                ```
                var ui = Y.fastUi(parentElement, "<Y:RandomStuff xmlns:Y='Y' xmlns:ui='fastui' ui:field='randomStuff' ui:config-key='myRandomConfig' config1='config1Value'/>", null, {
                    myRandomConfig : {
                        config2 : function() {
                            // some callback function.
                        }
                    }
                };
                ```
                This will have in turn the equivalent effect of calling for the creation:
                ```
                new Y.RandomStuff({
                    config1: 'config1Value',
                    config2 : function() {
                        // some callback function.
                    }
                });
                ```

                Of course in case you don't must send it to the constructor, the recommended way to do it is:
                ```
                var ui = Y.fastUi(...);
                ui.randomStuff.config2 = function() ...;
                ```
            </td>
        </tr>
    </tbody>
</table>